{
	"info": {
		"_postman_id": "5002fa42-15cb-473d-9c11-e4b06f71314b",
		"name": "Test API",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "13669707"
	},
	"item": [
		{
			"name": "Test Login",
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "test",
							"type": "string"
						},
						{
							"key": "username",
							"value": "test",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"username\": \"karn.yong@melivecode.com\",\n  \"password\": \"melivecode\",\n  \"expiresIn\": 50000\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "https://www.melivecode.com/api/login",
					"protocol": "https",
					"host": [
						"www",
						"melivecode",
						"com"
					],
					"path": [
						"api",
						"login"
					]
				}
			},
			"response": []
		},
		{
			"name": "Test Bitcoin price",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.sendRequest(\"https://postman-echo.com/get\", function (err, response) {\r",
							"    console.log(response.json());\r",
							"});\r",
							"\r",
							"\r",
							"\r",
							"pm.test(\"Response status code is 200\", function () {\r",
							"    pm.expect(pm.response.code).to.equal(200);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Response body is in JSON format\", function () {\r",
							"    pm.expect(pm.response.json()).to.be.an('array');\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Code field is a non-empty string\", function () {\r",
							"  const responseData = pm.response.json();\r",
							"  \r",
							"  pm.expect(responseData).to.be.an('array');\r",
							"  \r",
							"  responseData.forEach(function(item) {\r",
							"    pm.expect(item.code).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Code should not be empty\");\r",
							"  });\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Name field is a non-empty string\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData).to.be.an('array');\r",
							"    responseData.forEach(function(item) {\r",
							"        pm.expect(item.name).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Name should not be empty\");\r",
							"    });\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Rate field is a non-negative number\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData).to.be.an('array');\r",
							"    responseData.forEach(function(item) {\r",
							"        pm.expect(item.rate).to.be.a('number').and.to.be.at.least(0);\r",
							"    });\r",
							"});\r",
							"\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://bitpay.com/api/rates/btc",
					"protocol": "https",
					"host": [
						"bitpay",
						"com"
					],
					"path": [
						"api",
						"rates",
						"btc"
					]
				}
			},
			"response": []
		},
		{
			"name": "Test crypto price",
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://bitpay.com/rates/ETH",
					"protocol": "https",
					"host": [
						"bitpay",
						"com"
					],
					"path": [
						"rates",
						"ETH"
					]
				}
			},
			"response": []
		},
		{
			"name": "Test users_id",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 200\", function () {",
							"  pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Response body structure is valid\", function () {",
							"    pm.expect(pm.response.json()).to.have.property('id');",
							"});",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://jsonplaceholder.typicode.com/users/1",
					"protocol": "https",
					"host": [
						"jsonplaceholder",
						"typicode",
						"com"
					],
					"path": [
						"users",
						"1"
					]
				}
			},
			"response": []
		},
		{
			"name": "Test users_name",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Response body structure is valid name \", function () {\r",
							"    pm.expect(pm.response.json()).to.have.property('name');\r",
							"\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://jsonplaceholder.typicode.com/users/1",
					"protocol": "https",
					"host": [
						"jsonplaceholder",
						"typicode",
						"com"
					],
					"path": [
						"users",
						"1"
					]
				}
			},
			"response": []
		}
	]
}